{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/niya/ReactNativeProjects/DICTIONARY/DICTIONARYAPP-ONLINE/screens/HomeScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Header } from 'react-native-elements';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nvar HomeScreen = function (_React$Component) {\n  _inherits(HomeScreen, _React$Component);\n\n  var _super = _createSuper(HomeScreen);\n\n  function HomeScreen() {\n    var _this;\n\n    _classCallCheck(this, HomeScreen);\n\n    _this = _super.call(this);\n\n    _this.getWord = function (word) {\n      _this.setState({\n        word: \"Loading ...\"\n      });\n\n      var searchWord = word.toLowerCase();\n      var url = \"https://rupinwhitehatjr.github.io/dictionary/\" + searchWord + \".json\";\n      return fetch(url).then(function (data) {\n        if (data.status === 200) {\n          return data.json();\n        } else {\n          return null;\n        }\n      }).then(function (response) {\n        var responseObject = response;\n\n        if (responseObject) {\n          var wordData = responseObject.definitions[0];\n          var description = wordData.description;\n          var lexicalCategory = wordData.wordtype;\n\n          _this.setState({\n            \"word\": searchWord,\n            \"description\": description,\n            \"lexicalCategory\": lexicalCategory\n          });\n        } else {\n          _this.setState({\n            \"word\": \"Not Found\",\n            \"lexicalCategory\": \"Not Found\",\n            \"description\": \"Not Found\"\n          });\n        }\n      });\n    };\n\n    _this.state = {\n      text: '',\n      isButtonPressed: false,\n      word: '',\n      description: '',\n      lexicalCategory: ''\n    };\n    return _this;\n  }\n\n  _createClass(HomeScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(SafeAreaProvider, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }\n      }, React.createElement(Header, {\n        backgroundColor: \"#76212d\",\n        centerComponent: {\n          text: \"DICTIONARY APP\",\n          style: {\n            color: \"white\",\n            fontSize: 20\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }\n      }), React.createElement(TextInput, {\n        style: styles.inputBox,\n        onChangeText: function onChangeText(typed) {\n          _this2.setState({\n            text: typed\n          });\n        },\n        value: this.state.typed,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }\n      }), React.createElement(TouchableOpacity, {\n        style: styles.button,\n        onPress: function onPress() {\n          _this2.setState({\n            isButtonPressed: true\n          });\n\n          _this2.getWord(_this2.state.text);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: {\n          color: \"white\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }\n      }, \"Search\")), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: styles.typeStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }\n      }, \" Word :\", this.state.isButtonPressed && this.state.word === \"Loading ...\" ? this.state.word : this.state.word !== \"Loading...\" ? this.state.word : \"\"), React.createElement(Text, {\n        style: styles.typeStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }\n      }, \"Type : \", this.state.lexicalCategory), React.createElement(Text, {\n        style: styles.typeStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }\n      }, \"Definition : \", this.state.description))));\n    }\n  }]);\n\n  return HomeScreen;\n}(React.Component);\n\nexport { HomeScreen as default };\nvar styles = StyleSheet.create({\n  inputBox: {\n    marginTop: 100,\n    width: '80%',\n    alignSelf: 'center',\n    height: 40,\n    textAlign: 'center',\n    borderWidth: 4\n  },\n  button: {\n    justifyContent: 'center',\n    alignSelf: 'center',\n    textAlign: 'center',\n    borderWidth: 2,\n    borderRadius: 15,\n    marginTop: 50,\n    width: 100,\n    height: 50,\n    marginLeft: 70,\n    backgroundColor: \"#165673\",\n    color: \"white\"\n  },\n  typeStyle: {\n    fontSize: 20,\n    textAlign: \"left\",\n    marginTop: 20,\n    color: \"#67213c\"\n  }\n});","map":{"version":3,"sources":["/home/niya/ReactNativeProjects/DICTIONARY/DICTIONARYAPP-ONLINE/screens/HomeScreen.js"],"names":["React","Header","SafeAreaProvider","HomeScreen","getWord","word","setState","searchWord","toLowerCase","url","fetch","then","data","status","json","response","responseObject","wordData","definitions","description","lexicalCategory","wordtype","state","text","isButtonPressed","style","color","fontSize","styles","inputBox","typed","button","typeStyle","Component","StyleSheet","create","marginTop","width","alignSelf","height","textAlign","borderWidth","justifyContent","borderRadius","marginLeft","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {Text, StyleSheet , View , TextInput , Button , TouchableOpacity} from 'react-native';\nimport {Header} from 'react-native-elements';\nimport {SafeAreaProvider} from 'react-native-safe-area-context';\n\nexport default class HomeScreen extends React.Component{\n\n    constructor(){\n        super();\n        this.state = {\n            text : '',\n            isButtonPressed : false,\n            word : '',\n            description : '',\n            lexicalCategory : ''\n        }\n    }\n\n    getWord = (word)=>{\n        this.setState({word:\"Loading ...\"})\n        var searchWord = word.toLowerCase()\n        var url = \"https://rupinwhitehatjr.github.io/dictionary/\"+searchWord+\".json\"\n        return fetch(url)\n        .then((data)=>{\n            if(data.status === 200){\n                return data.json()\n            }else {\n                return null\n            }\n        })\n        .then((response)=>{\n            var responseObject = response;\n\n            if(responseObject){\n                var wordData = responseObject.definitions[0]\n                var description = wordData.description\n                var lexicalCategory = wordData.wordtype\n\n                this.setState({\n                    \"word\":searchWord,\n                    \"description\" : description,\n                    \"lexicalCategory\" : lexicalCategory\n                })\n            }else{\n                this.setState({\n                    \"word\" : \"Not Found\",\n                    \"lexicalCategory\" : \"Not Found\",\n                    \"description\" : \"Not Found\"\n                })\n            }\n        })\n    }\n\n    render(){\n        return(\n            <SafeAreaProvider>\n                <View>\n                    <Header\n                        backgroundColor = {\"#76212d\"}\n                        centerComponent = {{\n                        text:\"DICTIONARY APP\",\n                        style :{color:\"white\",fontSize:20},\n                    }}/> \n\n                    <TextInput \n                        style = {styles.inputBox}\n                        onChangeText={(typed)=>{\n                        this.setState({text:typed})\n                        }}\n                        value = {this.state.typed}\n                    />\n\n                    <TouchableOpacity style = {styles.button}\n                        onPress = {()=>{this.setState({isButtonPressed:true});\n                                        this.getWord(this.state.text);}}>\n                        <Text style = {{color : \"white\"}}>Search</Text>\n                    </TouchableOpacity>\n                    \n                    <View>\n                        <Text style = {styles.typeStyle}> Word :\n                            {\n                                this.state.isButtonPressed && this.state.word === \"Loading ...\"\n                                ? this.state.word : (this.state.word !== \"Loading...\" ? this.state.word : \"\")\n                            }    \n                              \n                        </Text>\n                        <Text style = {styles.typeStyle}>Type : {this.state.lexicalCategory}</Text>\n                        <Text style = {styles.typeStyle}>Definition : {this.state.description}</Text>\n                    </View>\n                </View>\n            </SafeAreaProvider>\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    \n    inputBox: {\n        marginTop: 100,\n        width: '80%',\n        alignSelf: 'center',\n        height: 40,\n        textAlign: 'center',\n        borderWidth: 4,\n      },\n    button: {\n        justifyContent: 'center',\n        alignSelf: 'center',\n        textAlign : 'center',\n        borderWidth: 2,\n        borderRadius: 15,\n        marginTop: 50,\n        width: 100,\n        height: 50,\n        marginLeft: 70,\n        backgroundColor:\"#165673\",\n        color:\"white\"\n      },\n    typeStyle:{\n        fontSize:20,\n        textAlign : \"left\",\n        marginTop:20,\n        color:\"#67213c\"\n      }\n})"]},"metadata":{},"sourceType":"module"}